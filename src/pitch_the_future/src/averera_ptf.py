#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""averera ptf.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b40oSu8z-0Vvn5Y806zt6qaioJBWIoOM
"""

import pandas as pd
import numpy as np
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
from matplotlib import rcParams
from matplotlib.cm import rainbow
import rospy
from std_msgs.msg import Int16

df = pd.read_csv("~/ptf_ws/src/pitch_the_future/src/heart.csv")

df.drop(columns = [ 'ChestPainType','Cholesterol', 'FastingBS',
        'ExerciseAngina', 'Oldpeak', 'ST_Slope'
       ], axis = 1, inplace = True)

standardScaler = StandardScaler()
columns_to_scale = ['Age', 'RestingBP', 'MaxHR']
df[columns_to_scale] = standardScaler.fit_transform(df[columns_to_scale])

df = pd.get_dummies(df, columns = ['Sex', 'RestingECG'])

y = df['HeartDisease']
X = df.drop(['HeartDisease'], axis = 1)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.33, random_state = 0)

# knn_classifier = KNeighborsClassifier(n_neighbors = 7)

# predict = knn_classifier.predict(X_test)

# knn_classifier.score(X_test, y_test)

knn_classifier = KNeighborsClassifier(n_neighbors = 7)
knn_classifier.fit(X_train, y_train)
# pf = knn_classifier.score(X_test, y_test)

# var = input()
# ans = knn_classifier.predict(var)
# print(ans)

pub = rospy.Publisher('ml_model_op', Int16, queue_size=10)
rospy.init_node('averera_ptf', anonymous=True)
rate = rospy.Rate(10)

while 1:
    R = 1
    C = 8

    matrix = []
    
    # For user input
    for i in range(R):          # A for loop for row entries
        a =[]
        for j in range(C):      # A for loop for column entries
            a.append(int(input()))
        matrix.append(a)

    ans = knn_classifier.predict(matrix)
    print("prediction:",ans[0])
    # 10hz
    # while not rospy.is_shutdown():
    pub.publish(ans)
    rate.sleep()
